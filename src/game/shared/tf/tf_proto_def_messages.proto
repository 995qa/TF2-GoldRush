//====== Copyright 1996-2010, Valve Corporation, All rights reserved. =======
//
// Purpose: The file defines our Google Protocol Buffers which are used to define
//			proto script definition objects' structures.
//
//=============================================================================

// We care more about speed than code size
option optimize_for = SPEED;

// We don't use the service generation functionality
option cc_generic_services = false;


//
// STYLE NOTES:
//
// Use CamelCase CMsgMyMessageName style names for messages.
//
// Use lowercase _ delimited names like my_steam_id for field names, this is non-standard for Steam,
// but plays nice with the Google formatted code generation.
//
// Try not to use required fields ever. Only do so if you are really really sure you'll never want them removed.
// Optional should be preffered as it will make versioning easier and cleaner in the future if someone refactors
// your message and wants to remove or rename fields.
//
// Use fixed64 for JobId_t, GID_t, or SteamID.  This is appropriate for any field that is normally
// going to be larger than 2^56.  Otherwise use int64 for 64 bit values that are frequently smaller
// than 2^56 as it will safe space on the wire in those cases.
//
// Similar to fixed64, use fixed32 for RTime32 or other 32 bit values that are frequently larger than
// 2^28.  It will safe space in those cases, otherwise use int32 which will safe space for smaller values.
// An exception to this rule for RTime32 is if the value will frequently be zero rather than set to an actual
// time.
//
// Note: to make something a key field, list it like so:
// optional	uint32		account_id = 1 [ (key_field) = true ];


import "google/protobuf/descriptor.proto";

extend google.protobuf.MessageOptions
{
    optional bool start_expanded = 80000 [ default = true ];
}

extend google.protobuf.FieldOptions
{
	optional ProtoDefTypes valid_type = 70000;
	optional bool editable = 70001 [ default = true ];
	optional bool localized = 70002 [ default = false ];
	optional bool do_not_inherit = 70003 [ default = false ];
	optional string display_name = 70004;
	optional string comment = 70005;
	optional uint32	max_count = 70007;
	optional bool allow_add = 70008 [ default = true ];
	optional bool allow_delete = 70009 [ default = true ];
	optional string panel_class_override = 70010;
	optional string message_inherhitance_key_field_name = 70011; // If the empty string, just append.  If not, try to find any repeated fields
																// in the derived message that has a matching key field
	optional bool inherit_reference_variables = 70012 [ default = false ];
	optional bool self_inherit_only = 70013 [ default = false ];
	optional EVarFieldType var_field_type = 70014 [ default = VAR_TYPE_INVALID ];
	optional bool merging_key_field = 70015 [ default = false ];
}

enum LogicalOperation
{
	AND = 0;
	OR = 1;
	NOT = 2;
};


// A reference to a field that might be within a nested message
message CMsgFieldID
{
	// A reference to a field
	message CMsgField
	{
		optional uint32 field_number = 1;
		optional uint32 repeated_index = 2; // This is ignored for non-repeated fields
	}

	repeated CMsgField field = 1; // Starting in the defining message body scope
}

enum EValueDefinitionSource
{
	REFERENCE_DEFINES = 0;
	PARENT_DEFINES = 1;
	THIS_DEFINES = 2;
	VARIABLE_DEFINES = 3;
	NOT_DEFINED = 4; // The default value is used
};

message CMsgUniversalFieldID
{
	optional EValueDefinitionSource	source_type		= 1; // Which type is defining us
	optional CMsgProtoDefID			defining_obj_id	= 2; // Which object defined the value
	optional CMsgFieldID			field_id		= 3; // From which field ID within the object
}

message CMsgVariableDefinition
{
	optional string			name		= 1 [ (merging_key_field) = true ];
	optional bool			inherit		= 2 [ default = true ];
	optional string			value		= 3;
}

message CMsgProtoDefHeader
{
	required uint32						defindex				= 1 [ (editable) = false,
																	  (self_inherit_only) = true,
																	  (display_name) = "Defindex",
																	  (comment) = "Autogenerated" ];

	optional string						name					= 2 [ (self_inherit_only)	= true,
																	  (display_name)		= "Name",
																	  (comment)				= "Name to show in the editor" ];

	repeated CMsgProtoDefID				prefabs					= 3 [ (self_inherit_only)	= true,
																	  (display_name)		= "Prefab",
																	  (panel_class_override) = "CPrefabFieldEditingPanel",
																	  (comment)				= "Inherit the values of these definitions, in order from top to bottom." ];

	repeated string						tags					= 4 [ (display_name)		= "Tags",
																	  (comment)				= "Strings used to describe this definition while searching.  ie. 'class', 'shotgun', 'easy'" ];

	optional bool						prefab_only				= 5 [ (self_inherit_only)	= true,
																	  default				= false,
																	  (display_name)		= "Pure Prefab",
																	  (comment)				= "If true, this is only a prefab and will not be made into an object" ];

	repeated CMsgVariableDefinition		variables				= 6 [ (message_inherhitance_key_field_name) = "name",
																	  (display_name)		= "Variables",
																	  (comment)				= "Variable value definitions" ];


}

// Add to the end and do not re-usereorder or fill gaps
enum ProtoDefTypes
{
	DEF_TYPE_PAINTKIT_VARIABLES = 0;
	DEF_TYPE_PAINTKIT_OPERATION = 1;
	DEF_TYPE_PAINTKIT_ITEM_DEFINITION = 2;
	DEF_TYPE_PAINTKIT_DEFINITION = 3;
	DEF_TYPE_HEADER_ONLY = 4;
};

message CMsgValidTypes
{
	repeated ProtoDefTypes types = 1;
}

message CMsgProtoDefID
{
	optional uint32 defindex = 1;
	optional ProtoDefTypes type = 2;

	oneof instance
	{
		CMsgPaintKit_Variables		instance_def_type_paintkit_variables = 9;
		CMsgPaintKit_Operation		instance_def_type_paintkit_operation = 10;
		CMsgPaintKit_ItemDefinition	instance_def_type_paintkit_item_definition = 11;
		CMsgPaintKit_Definition		instance_def_type_paintkit_definition = 12;
		CMsgHeaderOnly				instance_def_type_header_only = 13;
	}
}

enum EVarFieldType
{
	VAR_TYPE_INVALID = 1;
	VAR_TYPE_FLOAT	= 2;
	VAR_TYPE_DOUBLE	= 3;
	VAR_TYPE_UINT32	= 4;
	VAR_TYPE_UINT64	= 5;
	VAR_TYPE_SINT32	= 6;
	VAR_TYPE_SINT64	= 7;
	VAR_TYPE_BOOL	= 8;
	VAR_TYPE_STRING	= 9;
}

message CMsgVarField
{
	optional string variable = 1 [ (merging_key_field) = true ];

	oneof value
	{
		float	float	= 2;
		double	double	= 3;
		uint32	uint32	= 4;
		uint64	uint64	= 5;
		sint32	sint32	= 6;
		sint64	sint64	= 7;
		bool	bool	= 8;
		string	string	= 9;
	}
}

enum ENodeCashReward
{
	CASH_REWARD_NONE = 1;
	CASH_REWARD_SMALL = 2;
	CASH_REWARD_MEDIUM = 3;
	CASH_REWARD_LARGE = 4;
}

// template variables that don't change for an item
message CMsgPaintKit_Variables
{
	required	CMsgProtoDefHeader	header			=	1;
}

message CMsgPaintKit_Operation_TextureStage
{
	optional	CMsgVarField	texture			=	1	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseStringFromKV,
	optional	CMsgVarField	texture_red		=	2	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseStringFromKV,
	optional	CMsgVarField	texture_blue	=	3	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseStringFromKV,
	optional	CMsgVarField	adjust_black	=	4	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField	adjust_offset	=	5	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField	adjust_gamma	=	6	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseInverseRangeFromKV,
	optional	CMsgVarField	rotation		=	7	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	translate_u		=	8	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	translate_v		=	9	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	scale_uv		=	10	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	flip_u			=	11	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseBoolFromKV,
	optional	CMsgVarField	flip_v			=	12	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseBoolFromKV,
}

message CMsgPaintKit_Operation_CombineStage
{
	optional	CMsgVarField	adjust_black	=	1	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField	adjust_offset	=	2	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField	adjust_gamma	=	3	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseInverseRangeFromKV,
	optional	CMsgVarField	rotation		=	4	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	translate_u		=	5	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	translate_v		=	6	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	scale_uv		=	7	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeFromKV,
	optional	CMsgVarField	flip_u			=	8	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseBoolFromKV,
	optional	CMsgVarField	flip_v			=	9	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseBoolFromKV,

	repeated	CMsgPaintKit_OperationNode	operation_node	=	11;
}

message CMsgPaintKit_Operation_SelectStage
{
	optional	CMsgVarField	groups			=	1	[ (var_field_type) = VAR_TYPE_STRING ];						//	ParseStringFromKV,
	repeated	CMsgVarField	select			=	2	[ (var_field_type) = VAR_TYPE_STRING, (max_count) = 16 ];	//	ParseVectorFromKV< int, cMaxSelectors >,
}

message CMsgPaintKit_Operation_Sticker
{
	optional	CMsgVarField	base			=	1	[ (var_field_type) = VAR_TYPE_STRING, (comment) = "Name of the base file for the sticker (the albedo)" ];
	optional	CMsgVarField	weight			=	2	[ (var_field_type) = VAR_TYPE_STRING, (comment) = "Random likelihood this one is to be selected" ];
	optional	CMsgVarField	spec			=	3	[ (var_field_type) = VAR_TYPE_STRING, (comment) = "Name of the specular file for the sticker, or if blank we will assume it is baseFilename + _spec + baseExtension" ];
}

message CMsgPaintKit_Operation_StickerStage
{
	repeated	CMsgPaintKit_Operation_Sticker	sticker			=	1;	//	ParseVectorFromKV< Sticker_t >,
	optional	CMsgVarField					dest_tl			=	2	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseSettable< Vector2D >,
	optional	CMsgVarField					dest_tr			=	3	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseSettable< Vector2D >,
	optional	CMsgVarField					dest_bl			=	4	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseSettable< Vector2D >,
	optional	CMsgVarField					adjust_black	=	5	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField					adjust_offset	=	6	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseRangeThenDivideBy<255>,
	optional	CMsgVarField					adjust_gamma	=	7	[ (var_field_type) = VAR_TYPE_STRING ];	//	ParseInverseRangeFromKV,

	repeated	CMsgPaintKit_OperationNode		operation_node	=	9;
}

message CMsgPaintKit_OperationStage
{
	oneof stage
	{
		CMsgPaintKit_Operation_TextureStage		texture_lookup			= 1;
		CMsgPaintKit_Operation_CombineStage		combine_add				= 2;
		CMsgPaintKit_Operation_CombineStage		combine_lerp			= 3;
		CMsgPaintKit_Operation_CombineStage		combine_multiply		= 4;
		CMsgPaintKit_Operation_SelectStage		select					= 5;
		CMsgPaintKit_Operation_StickerStage		apply_sticker			= 6;
	}
}

message CMsgPaintKit_OperationNode
{
	oneof node
	{
		CMsgPaintKit_OperationStage				stage					= 1;
		CMsgProtoDefID							operation_template		= 2 [ (valid_type) =  DEF_TYPE_PAINTKIT_OPERATION, (inherit_reference_variables) = true ];
	}
}

message CMsgPaintKit_Operation
{
	required	CMsgProtoDefHeader				header			= 1;
	repeated	CMsgPaintKit_OperationNode		operation_node	= 2;
}

// paintkit item def
message CMsgPaintKit_ItemDefinition
{
	// paintkit def is a combination of variables and operations
	message Definition
	{
		optional	CMsgProtoDefID		operation_template	=	1 [ (valid_type) = DEF_TYPE_PAINTKIT_OPERATION ];
		repeated	CMsgVarField		variable			=	2 [ (allow_add) = false, (allow_delete) = false, (var_field_type) = VAR_TYPE_STRING ];
	}

	required	CMsgProtoDefHeader	header					=	1;
	required	uint32				item_definition_index	=	2;
	optional	CMsgProtoDefID		variable_template		=	3 [ (valid_type) =  DEF_TYPE_PAINTKIT_VARIABLES, (inherit_reference_variables) = true ];
	repeated	Definition			definition				=	4 [ (max_count) = 5 ];
}

message CMsgPaintKit_Definition
{
	message Item
	{
		option (start_expanded) = false;

		required	CMsgProtoDefID			item_definition_template	= 1	[ (valid_type) =  DEF_TYPE_PAINTKIT_ITEM_DEFINITION , (panel_class_override) = "CPaintKitDefIdFieldProtoEditorField" ];

		message ItemData
		{
			optional	bool					can_apply_paintkit			= 2 [ default = true ];
			optional	string					material_override			= 3;
			repeated	CMsgVarField			variable					= 4 [ (allow_add) = false, (allow_delete) = false, (var_field_type) = VAR_TYPE_STRING ];
		}

		optional ItemData data = 5;
	}

	required	CMsgProtoDefHeader			header				= 1;
	optional	string						loc_desctoken		= 2	[ (localized) = true ];
	optional	CMsgProtoDefID				operation_template	= 3 [ (inherit_reference_variables) = true, (valid_type) = DEF_TYPE_PAINTKIT_OPERATION , (comment) = "operation template which all items in the list will use unless there's operation_template specified in an item_definition" ];
	optional	bool						has_team_textures	= 4;

	// this is only for OLD paintkit
	repeated	Item						item				= 5;

	// add paintkit weapons here
	optional	Item						paintkit_tool       = 6;

	//stock paintkit weapons
	optional	Item						flamethrower        = 7;
	optional	Item						grenadelauncher     = 8;
	optional	Item						knife               = 9;
	optional	Item						medigun             = 10;
	optional	Item						minigun             = 11;
	optional	Item						pistol              = 12;
	optional	Item						revolver            = 13;
	optional	Item						rocketlauncher      = 14;
	optional	Item						scattergun          = 15;
	optional	Item						shotgun             = 16;
	optional	Item						smg                 = 17;
	optional	Item						sniperrifle         = 18;
	optional	Item						stickybomb_launcher = 19;
	optional	Item						ubersaw             = 20;
	optional	Item						wrench              = 21;
	//workshop paintkit weapons
	optional	Item						amputator           = 22;
	optional	Item						atom_launcher       = 23;
	optional	Item						back_scratcher      = 24;
	optional	Item						battleaxe           = 25;
	optional	Item						bazaar_sniper       = 26;
	optional	Item						blackbox            = 27;
	optional	Item						claidheamohmor      = 28;
	optional	Item						crusaders_crossbow  = 29;
	optional	Item						degreaser           = 30;
	optional	Item						demo_cannon         = 31;
	optional	Item						demo_sultan_sword   = 32;
	optional	Item						detonator           = 33;
	optional	Item						gatling_gun         = 34;
	optional	Item						holymackerel        = 35;
	optional	Item						jag                 = 36;
	optional	Item						lochnload           = 37;
	optional	Item						powerjack           = 38;
	optional	Item						quadball            = 39;
	optional	Item						reserve_shooter     = 40;
	optional	Item						riding_crop         = 41;
	optional	Item						russian_riot        = 42;
	optional	Item						scimitar            = 43;
	optional	Item						scorch_shot         = 44;
	optional	Item						shortstop           = 45;
	optional	Item						soda_popper         = 46;
	optional	Item						tele_shotgun        = 47;
	optional	Item						tomislav            = 48;
	optional	Item						trenchgun           = 49;
	optional	Item						winger_pistol       = 50;
}

message CMsgHeaderOnly
{
	required	CMsgProtoDefHeader	header	= 1;
}

// End of File
